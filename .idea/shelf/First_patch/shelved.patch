Index: src/test/java/com/ideas/robot/DistanceValidatorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/ideas/robot/DistanceValidatorTest.java	(revision )
+++ src/test/java/com/ideas/robot/DistanceValidatorTest.java	(revision )
@@ -0,0 +1,25 @@
+package com.ideas.robot;
+
+import org.junit.Test;
+
+import static junit.framework.TestCase.assertTrue;
+
+
+public class DistanceValidatorTest {
+    @Test
+    public void canTravelFor2KM() throws Exception {
+        Validator validator = new DistanceValidator(5.0f);
+
+        boolean valid = validator.isValid(2);
+
+        assertTrue(valid);
+    }
+    @Test(expected = Exception.class)
+    public void shouldThrowAnExceptionWhenWeightCapacityIsExceeded() throws Exception {
+        Validator validator = new DistanceValidator(5.0f);
+
+        validator.isValid(12);
+    }
+
+
+}
Index: src/main/java/com/ideas/robot/Battery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/Battery.java	(revision )
+++ src/main/java/com/ideas/robot/Battery.java	(revision )
@@ -0,0 +1,36 @@
+package com.ideas.robot;
+
+
+public class Battery {
+    private static final String LIT_UP_RED_LIGHT = "lit up red light";
+    private static final String AND = "and ";
+    private static final String REMAINING = "% remaining ";
+    private static final float LOW_BATTERY_WARNING_VALUE = 15.0f;
+    private static final String BATTERY_DRAINED_COMPLETELY = "Battery Drained completely";
+    private static final String BATTERY_DRAINED_COMPLETELY_WITHOUT_ACCOMPLISHING_TASK = "Battery Drained completely without accomplishing task";
+    private float remainingBattery;
+
+    public Battery(float remainingBattery) {
+        this.remainingBattery = remainingBattery;
+    }
+
+    public String displayBatteryStatus() {
+        if(remainingBattery == 0){
+            return BATTERY_DRAINED_COMPLETELY;
+        }
+
+        if(remainingBattery < 0){
+            return BATTERY_DRAINED_COMPLETELY_WITHOUT_ACCOMPLISHING_TASK;
+        }
+
+        if(remainingBattery < LOW_BATTERY_WARNING_VALUE) {
+            return remainingBattery + REMAINING + AND + LIT_UP_RED_LIGHT;
+        }
+        return remainingBattery +REMAINING;
+    }
+
+
+    public void consumeBattery(float drainedPercentage) {
+        remainingBattery -= drainedPercentage;
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+  <component name="masterDetails">
+    <states>
+      <state key="GlobalLibrariesConfigurable.UI">
+        <settings>
+          <splitter-proportions>
+            <option name="proportions">
+              <list>
+                <option value="0.2" />
+              </list>
+            </option>
+          </splitter-proportions>
+        </settings>
+      </state>
+      <state key="JdkListConfigurable.UI">
+        <settings>
+          <last-edited>1.8</last-edited>
+          <splitter-proportions>
+            <option name="proportions">
+              <list>
+                <option value="0.2" />
+              </list>
+            </option>
+          </splitter-proportions>
+        </settings>
+      </state>
+      <state key="ProjectJDKs.UI">
+        <settings>
+          <last-edited>1.6</last-edited>
+          <splitter-proportions>
+            <option name="proportions">
+              <list>
+                <option value="0.2" />
+              </list>
+            </option>
+          </splitter-proportions>
+        </settings>
+      </state>
+      <state key="ProjectLibrariesConfigurable.UI">
+        <settings>
+          <splitter-proportions>
+            <option name="proportions">
+              <list>
+                <option value="0.2" />
+              </list>
+            </option>
+          </splitter-proportions>
+        </settings>
+      </state>
+    </states>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/ideas/robot/WeightValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/WeightValidator.java	(revision )
+++ src/main/java/com/ideas/robot/WeightValidator.java	(revision )
@@ -0,0 +1,18 @@
+package com.ideas.robot;
+
+
+public class WeightValidator implements Validator {
+    private static final String OVERWEIGHT_MESSAGE = "Overweight";
+    private final float maxWeight;
+
+    public WeightValidator(float maxWeight) {
+        this.maxWeight = maxWeight;
+    }
+
+    public boolean isValid(float weight) throws Exception {
+        if(weight>maxWeight){
+            throw new Exception(OVERWEIGHT_MESSAGE);
+        }
+        return true;
+    }
+}
Index: .idea/libraries/Maven__junit_junit_4_12.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__junit_junit_4_12.xml	(revision )
+++ .idea/libraries/Maven__junit_junit_4_12.xml	(revision )
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: junit:junit:4.12">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.12/junit-4.12.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.12/junit-4.12-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.12/junit-4.12-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_3.xml	(revision )
+++ .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_3.xml	(revision )
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.hamcrest:hamcrest-core:1.3">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision )
+++ .idea/compiler.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="CodingKatta" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel target="1.8">
+      <module name="CodingKatta" target="1.5" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: src/test/java/com/ideas/robot/BatteryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/ideas/robot/BatteryTest.java	(revision )
+++ src/test/java/com/ideas/robot/BatteryTest.java	(revision )
@@ -0,0 +1,49 @@
+package com.ideas.robot;
+
+
+import org.junit.Test;
+
+import static junit.framework.TestCase.assertEquals;
+
+public class BatteryTest {
+
+    @Test
+    public void shouldShowBatteryCharged(){
+        Battery battery =new Battery(100);
+        String message = battery.displayBatteryStatus();
+
+        assertEquals("100.0% remaining ",message);
+    }
+
+    @Test
+    public void shouldShowRemainingPercentage(){
+        Battery battery =new Battery(100);
+        battery.consumeBattery(90);
+
+        String message = battery.displayBatteryStatus();
+
+        assertEquals("10.0% remaining and lit up red light",message);
+    }
+
+    @Test
+    public void shouldShowBatteryDrained(){
+        Battery battery =new Battery(100);
+        battery.consumeBattery(100);
+
+        String message = battery.displayBatteryStatus();
+
+        assertEquals("Battery Drained completely",message);
+    }
+
+    @Test
+    public void shouldShowErrorMessage(){
+        Battery battery =new Battery(100);
+        battery.consumeBattery(110);
+
+        String message = battery.displayBatteryStatus();
+
+        assertEquals("Battery Drained completely without accomplishing task",message);
+    }
+
+
+}
Index: src/main/java/com/ideas/robot/Validator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/Validator.java	(revision )
+++ src/main/java/com/ideas/robot/Validator.java	(revision )
@@ -0,0 +1,6 @@
+package com.ideas.robot;
+
+
+public interface Validator {
+     boolean isValid(float weight) throws Exception;
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(revision )
+++ .idea/uiDesigner.xml	(revision )
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/ideas/robot/Robot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/Robot.java	(revision )
+++ src/main/java/com/ideas/robot/Robot.java	(revision )
@@ -0,0 +1,44 @@
+package com.ideas.robot;
+
+
+public class Robot {
+    private final WeightValidator weightValidator;
+    private final DistanceValidator distanceValidator;
+    private float batteryPercentage = 100f;
+    private final Battery battery;
+
+
+    public Robot(WeightValidator weightValidator, DistanceValidator distanceValidator, Battery battery) {
+        this.weightValidator = weightValidator;
+        this.distanceValidator = distanceValidator;
+        this.battery = battery;
+    }
+
+    public String walksFor(float distanceWalked) {
+        String message =null;
+        try {
+            if(distanceValidator.isValid(distanceWalked)){
+                battery.consumeBattery(distanceWalked * 20);
+                return battery.displayBatteryStatus();
+            }
+        } catch (Exception e) {
+            message = e.getMessage();
+        }
+        return message;
+    }
+
+
+    public String walksWithWeight(float weight, float distance) {
+        String message;
+        try {
+            if(weightValidator.isValid(weight)) {
+                battery.consumeBattery(weight * 2);
+            }
+            return walksFor(distance);
+        } catch (Exception e) {
+           message = e.getMessage();
+        }
+
+        return message;
+    }
+}
Index: src/main/java/com/ideas/robot/Unit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/Unit.java	(revision )
+++ src/main/java/com/ideas/robot/Unit.java	(revision )
@@ -0,0 +1,9 @@
+package com.ideas.robot;
+
+/**
+ * Created by idnsri on 2/13/2019.
+ */
+public enum Unit {
+
+    KILOGRAM, KILOMETER
+}
Index: src/test/java/com/ideas/robot/WeightValidatorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/ideas/robot/WeightValidatorTest.java	(revision )
+++ src/test/java/com/ideas/robot/WeightValidatorTest.java	(revision )
@@ -0,0 +1,25 @@
+package com.ideas.robot;
+
+import org.junit.Test;
+
+import static junit.framework.TestCase.assertTrue;
+
+
+public class WeightValidatorTest {
+
+    @Test
+    public void canPickUpWeightOf2KG() throws Exception {
+        Validator validator = new WeightValidator(10.0f);
+
+        boolean valid = validator.isValid(2);
+
+        assertTrue(valid);
+    }
+
+    @Test(expected = Exception.class)
+    public void shouldThrowAnExceptionWhenWeightCapacityIsExceeded() throws Exception {
+        Validator validator = new WeightValidator(10.0f);
+
+        validator.isValid(12);
+    }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/CodingKatta.iml" filepath="$PROJECT_DIR$/CodingKatta.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: CodingKatta.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CodingKatta.iml	(revision )
+++ CodingKatta.iml	(revision )
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: junit:junit:4.12" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision )
+++ pom.xml	(revision )
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>CodingKatta</groupId>
+    <artifactId>13-feb</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <dependencies>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.12</version>
+        </dependency>
+    </dependencies>
+
+
+</project>
\ No newline at end of file
Index: src/test/java/com/ideas/robot/RobotTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/ideas/robot/RobotTest.java	(revision )
+++ src/test/java/com/ideas/robot/RobotTest.java	(revision )
@@ -0,0 +1,93 @@
+package com.ideas.robot;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+
+public class RobotTest {
+    private final WeightValidator WEIGHT_VALIDATOR = new WeightValidator(10.0f);
+    private final DistanceValidator DISTANCE_VALIDATOR = new DistanceValidator(5.0f);
+    private Battery battery =new Battery(100);
+
+    @Test
+    public void isRobotPresent(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        Assert.assertNotNull(robot);
+    }
+
+    @Test
+    public void currentPercentageOfBatteryOfRobot(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksFor(0);
+        assertEquals("100.0% remaining ", message);
+    }
+
+    @Test
+    public void currentPercentageOfBatteryOfRobotAfterFiveKilometeres(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksFor(5);
+        assertEquals("Battery Drained completely", message);
+    }
+
+
+    @Test
+    public void currentPercentageOfBatteryOfRobotAfterThree_And_HalfKilometeres(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksFor(3.5f);
+        assertEquals("30.0% remaining ", message);
+    }
+
+    @Test
+    public void robotConsumesTwoPercentBatteryForEveryKGWeight(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message =robot.walksWithWeight(2, 0);
+        assertEquals("96.0% remaining ", message);
+    }
+
+    @Test
+    public void robotWalksFor2KMWith3KGWeight(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksWithWeight(3, 2);
+        assertEquals("54.0% remaining ",message);
+    }
+
+    @Test
+    public void robotWalksFor9KGWeight(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksWithWeight(9, 0);
+        assertEquals("82.0% remaining ", message);
+    }
+
+    @Test
+    public void robotShouldDisplayOverWeightMessage(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message =robot.walksWithWeight(10.1f, 0);
+        assertEquals("Overweight", message);
+    }
+
+    @Test
+    public void currentPercentageOfBatteryOfRobotAfterFourAndHalfKilometeres(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksFor(4.5f);
+        assertEquals("10.0% remaining and lit up red light", message);
+    }
+
+    @Test
+    public void batteryDrainedWithoutCompletingTask(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksWithWeight(9,4.5f);
+        assertEquals("Battery Drained completely without accomplishing task", message);
+    }
+
+    @Test
+    public void robotAcceptsMultipleCommands(){
+        Robot robot = new Robot(WEIGHT_VALIDATOR,DISTANCE_VALIDATOR, battery);
+        String message = robot.walksFor(4.5f);
+        assertEquals("10.0% remaining and lit up red light", message);
+    }
+
+
+
+}
Index: src/main/java/com/ideas/robot/DistanceValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ideas/robot/DistanceValidator.java	(revision )
+++ src/main/java/com/ideas/robot/DistanceValidator.java	(revision )
@@ -0,0 +1,17 @@
+package com.ideas.robot;
+
+
+public class DistanceValidator implements Validator {
+    private final float maxDistance;
+
+    public DistanceValidator(float maxDistance) {
+        this.maxDistance = maxDistance;
+    }
+
+    public boolean isValid(float distance) throws Exception {
+        if(distance > maxDistance){
+            throw new Exception("Cannot Travel more than "+maxDistance);
+        }
+        return true;
+    }
+}
